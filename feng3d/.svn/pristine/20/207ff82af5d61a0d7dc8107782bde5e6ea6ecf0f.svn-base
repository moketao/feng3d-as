package me.feng3d.fagal.fragment.light
{
	import me.feng3d.core.register.Register;
	import me.feng3d.fagal.base.getFreeTemp;
	import me.feng3d.fagal.base.removeTemp;
	import me.feng3d.fagal.base.operation.add;
	import me.feng3d.fagal.base.operation.dp3;
	import me.feng3d.fagal.base.operation.max;
	import me.feng3d.fagal.base.operation.mul;
	import me.feng3d.fagal.methods.FagalRE;
	import me.feng3d.fagal.params.ShaderParams;

	/**
	 *
	 * @author warden_feng 2015-4-24
	 */
	public function getDiffCodePerLight(lightDirReg:Register, diffuseColorReg:Register, _isFirstLight:Boolean, totalLightColorReg:Register, normalFragmentReg:Register, commonsReg:Register):void
	{
		var shaderParams:ShaderParams = FagalRE.instance.context3DCache.shaderParams;
		var diffuseColorFtReg:Register;
		if (_isFirstLight)
		{
			diffuseColorFtReg = totalLightColorReg;
		}
		else
		{
			diffuseColorFtReg = getFreeTemp("单个漫反射光寄存器")
		}

		//计算灯光方向与法线夹角
		dp3(diffuseColorFtReg.x, lightDirReg, normalFragmentReg);
		//过滤负数
		max(diffuseColorFtReg.w, diffuseColorFtReg.x, commonsReg.y);

		//灯光衰减
		if (shaderParams.useLightFallOff)
			mul(diffuseColorFtReg.w, diffuseColorFtReg.w, lightDirReg.w);

		//计算灯光颜色
		mul(diffuseColorFtReg, diffuseColorFtReg.w, diffuseColorReg);

		//叠加灯光
		if (!_isFirstLight)
		{
			add(totalLightColorReg.xyz, totalLightColorReg, diffuseColorFtReg);
			removeTemp(diffuseColorFtReg);
		}
	}
}
