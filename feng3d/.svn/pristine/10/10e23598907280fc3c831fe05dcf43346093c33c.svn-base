package me.feng3d.fagal.fragment
{
	import me.feng3d.core.buffer.Context3DBufferTypeID;
	import me.feng3d.core.register.Register;
	import me.feng3d.fagal.base.requestRegister;
	import me.feng3d.fagal.fragment.light.F_Ambient;
	import me.feng3d.fagal.fragment.light.F_DirectionalLight;
	import me.feng3d.fagal.fragment.light.F_PointLight;
	import me.feng3d.fagal.fragment.light.F_SpecularPostLighting;
	import me.feng3d.fagal.fragment.particle.F_Particles;
	import me.feng3d.fagal.methods.FagalFragmentMethod;

	/**
	 * 片段渲染程序主入口
	 * @author warden_feng 2014-10-30
	 */
	public class F_Main extends FagalFragmentMethod
	{
		override public function runFunc():void
		{
			if (shaderParams.needsNormals)
				if (shaderParams.hasNormalTexture)
				{
					//切线变量寄存器
					var tangentVarying:Register = requestRegister(Context3DBufferTypeID.TANGENT_V);
					//双切线变量寄存器
					var bitangentVarying:Register = requestRegister(Context3DBufferTypeID.BITANGENT_V);
					//法线变量寄存器
					var normalVarying:Register = requestRegister(Context3DBufferTypeID.NORMAL_V);
					//法线纹理数据片段临时寄存器
					var normalTexData:Register = requestRegister("normalTexData_ft_4");
					//法线临时片段寄存器
					var normalFragment:Register = requestRegister(Context3DBufferTypeID.NORMAL_FT_4);

					F_TangentNormalMap(tangentVarying, bitangentVarying, normalVarying, normalTexData, normalFragment);
				}
				else
					call(F_TangentNormalNoMap);

			if (shaderParams.hasSpecularTexture)
				call(F_SpecularSample);

			if (shaderParams.needsViewDir)
				call(F_ViewDir);

			if (shaderParams.numDirectionalLights)
				call(F_DirectionalLight);
			if (shaderParams.numPointLights)
				call(F_PointLight);

			if (shaderParams.usingDiffuseMethod)
				call(shaderParams.diffuseMethod);

			if (shaderParams.numLights > 0)
			{
				if (shaderParams.usingSpecularMethod)
					call(F_SpecularPostLighting);
				call(F_Ambient);
			}

			//调用粒子相关片段渲染程序
			if (shaderParams.particleShaderParam != null)
			{
				call(F_Particles);
			}

			call(F_FinalOut);
		}
	}
}
