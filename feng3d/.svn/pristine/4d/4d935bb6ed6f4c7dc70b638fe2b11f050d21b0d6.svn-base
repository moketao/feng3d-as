package me.feng3d.core.partition
{
	import me.feng3d.arcane;

	use namespace arcane;

	/**
	 *
	 * The NodeBase class is an abstract base class for any type of space partition tree node. The concrete
	 * subtype will control the creation of its child nodes, which are necessarily of the same type. The exception is
	 * the creation of leaf entity nodes, which is handled by the Partition3D class.
	 *
	 * @see away3d.partition.EntityNode
	 * @see away3d.partition.Partition3D
	 * @see away3d.containers.Scene3D
	 * @author warden_feng 2015-3-8
	 */
	public class NodeBase
	{
		arcane var _parent:NodeBase;
		protected var _childNodes:Vector.<NodeBase>;
		protected var _numChildNodes:uint;

		arcane var _numEntities:int;

		public function NodeBase()
		{
		}

		/**
		 * Removes a child node from the tree.
		 * @param node The child node to be removed.
		 */
		arcane function removeNode(node:NodeBase):void
		{
			// a bit faster than splice(i, 1), works only if order is not important
			// override item to be removed with the last in the list, then remove that last one
			// Also, the "real partition nodes" of the tree will always remain unmoved, first in the list, so if there's
			// an order dependency for them, it's still okay
			var index:uint = _childNodes.indexOf(node);
			_childNodes[index] = _childNodes[--_numChildNodes];
			_childNodes.pop();

			// update numEntities in the tree
			var numEntities:int = node._numEntities;
			node = this;

			do
				node._numEntities -= numEntities;
			while ((node = node._parent) != null);
		}
	}
}
