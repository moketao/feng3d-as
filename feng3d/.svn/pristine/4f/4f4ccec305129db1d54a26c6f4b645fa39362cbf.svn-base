package me.feng3d.animators.nodes
{
	import flash.geom.Vector3D;
	
	import me.feng3d.arcane;
	import me.feng3d.animators.data.ParticleProperties;
	import me.feng3d.animators.data.ParticlePropertiesMode;
	import me.feng3d.core.buffer.context3d.VCVectorBuffer;
	import me.feng3d.fagal.context3dDataIds.ParticleContext3DBufferID;
	import me.feng3d.fagal.params.ParticleShaderParam;

	use namespace arcane;

	/**
	 * 例子缩放节点
	 * @author warden_feng 2015-1-15
	 */
	public class ParticleScaleNode extends ParticleNodeBase
	{
		/** @private */
		arcane var _usesCycle:Boolean;

		/** @private */
		arcane var _usesPhase:Boolean;

		/** @private */
		arcane var _minScale:Number;
		/** @private */
		arcane var _maxScale:Number;
		/** @private */
		arcane var _cycleDuration:Number;
		/** @private */
		arcane var _cyclePhase:Number;
		
		private var _scaleData:Vector.<Number>;

		/**
		 * Reference for scale node properties on a single particle (when in local property mode).
		 * Expects a <code>Vector3D</code> representing the min scale (x), max scale(y), optional cycle speed (z) and phase offset (w) applied to the particle.
		 */
		public static const SCALE_VECTOR3D:String = "ScaleVector3D";

		/**
		 * Defines the end scale of the state, when in global mode. Defaults to 1.
		 */
		public function get minScale():Number
		{
			return _minScale;
		}
		
		public function set minScale(value:Number):void
		{
			_minScale = value;
			
			updateScaleData();
		}
		
		/**
		 * Defines the end scale of the state, when in global mode. Defaults to 1.
		 */
		public function get maxScale():Number
		{
			return _maxScale;
		}
		
		public function set maxScale(value:Number):void
		{
			_maxScale = value;
			
			updateScaleData();
		}
		
		/**
		 * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.
		 */
		public function get cycleDuration():Number
		{
			return _cycleDuration;
		}
		
		public function set cycleDuration(value:Number):void
		{
			_cycleDuration = value;
			
			updateScaleData();
		}
		
		/**
		 * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.
		 */
		public function get cyclePhase():Number
		{
			return _cyclePhase;
		}
		
		public function set cyclePhase(value:Number):void
		{
			_cyclePhase = value;
			
			updateScaleData();
		}
		
		/**
		 *
		 * @param mode				模式
		 * @param usesCycle
		 * @param usesPhase
		 * @param minScale			最小缩放
		 * @param maxScale			最大缩放
		 * @param cycleDuration
		 * @param cyclePhase
		 */
		public function ParticleScaleNode(mode:uint, usesCycle:Boolean, usesPhase:Boolean, minScale:Number = 1, maxScale:Number = 1, cycleDuration:Number = 1, cyclePhase:Number = 0)
		{
			var len:int = 2;
			if (usesCycle)
				len++;
			if (usesPhase)
				len++;
			super("ParticleScale", mode, len, 3);

			_usesCycle = usesCycle;
			_usesPhase = usesPhase;

			_minScale = minScale;
			_maxScale = maxScale;
			_cycleDuration = cycleDuration;
			_cyclePhase = cyclePhase;
			
			updateScaleData();
		}
		
		override protected function initBuffers():void
		{
			super.initBuffers();
			
			if (mode == ParticlePropertiesMode.GLOBAL)
				mapContext3DBuffer(ParticleContext3DBufferID.PARTICLESCALE_VC_VECTOR, VCVectorBuffer, updateVelocityConstBuffer);
		}
		
		private function updateVelocityConstBuffer(velocityConstBuffer:VCVectorBuffer):void
		{
			velocityConstBuffer.update(_scaleData);
		}
		
		private function updateScaleData():void
		{
			if (mode == ParticlePropertiesMode.GLOBAL)
			{
				if (_usesCycle)
				{
					if (_cycleDuration <= 0)
						throw(new Error("the cycle duration must be greater than zero"));
					_scaleData = Vector.<Number>([(_minScale + _maxScale) / 2, Math.abs(_minScale - _maxScale) / 2, Math.PI * 2 / _cycleDuration, _cyclePhase * Math.PI / 180]);
				}
				else
					_scaleData = Vector.<Number>([_minScale, _maxScale - _minScale, 0, 0]);
			}
		}

		/**
		 * @inheritDoc
		 */
		override arcane function generatePropertyOfOneParticle(param:ParticleProperties):void
		{
			var scale:Vector3D = param[SCALE_VECTOR3D];
			if (!scale)
				throw(new Error("there is no " + SCALE_VECTOR3D + " in param!"));

			if (_usesCycle)
			{
				_oneData[0] = (scale.x + scale.y) / 2;
				_oneData[1] = Math.abs(scale.x - scale.y) / 2;
				if (scale.z <= 0)
					throw(new Error("the cycle duration must be greater than zero"));
				_oneData[2] = Math.PI * 2 / scale.z;
				if (_usesPhase)
					_oneData[3] = scale.w * Math.PI / 180;
			}
			else
			{
				_oneData[0] = scale.x;
				_oneData[1] = scale.y - scale.x;
			}
		}

		/**
		 * @inheritDoc
		 */
		override arcane function processAnimationSetting(particleShaderParam:ParticleShaderParam):void
		{
			particleShaderParam.changePosition++;
			particleShaderParam[animationName] = true;
		}
	}
}
