package me.feng3d.passes
{
	import flash.display3D.Context3D;
	import flash.display3D.Context3DProgramType;
	import flash.geom.Matrix3D;

	import me.feng3d.arcane;
	import me.feng3d.cameras.Camera3D;
	import me.feng3d.core.base.renderable.IRenderable;
	import me.feng3d.core.buffer.context3d.VCMatrixBuffer;
	import me.feng3d.core.math.Matrix3DUtils;
	import me.feng3d.core.proxy.Stage3DProxy;
	import me.feng3d.fagal.context3dDataIds.Context3DBufferTypeIDCommon;

	use namespace arcane;

	/**
	 *
	 * @author warden_feng 2015-5-29
	 */
	public class DepthMapPass extends MaterialPassBase
	{
		/**
		 * 物体投影变换矩阵（模型空间坐标-->GPU空间坐标）
		 */
		protected const modelViewProjection:Matrix3D = new Matrix3D();

		private var _data:Vector.<Number>;

		public function DepthMapPass()
		{
			super();
			_data = Vector.<Number>([1.0, 255.0, 65025.0, 16581375.0, //
				1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0, //
				0.0, 0.0, 0.0, 0.0 //
				]);
		}

		override protected function initBuffers():void
		{
			super.initBuffers();
			mapContext3DBuffer(Context3DBufferTypeIDCommon.PROJECTION_VC_MATRIX, VCMatrixBuffer, updateProjectionBuffer);
		}

		/**
		 * 更新投影矩阵缓冲
		 * @param projectionBuffer		投影矩阵缓冲
		 */
		protected function updateProjectionBuffer(projectionBuffer:VCMatrixBuffer):void
		{
			projectionBuffer.update(modelViewProjection, true);
		}

		/**
		 * @inheritDoc
		 */
		arcane override function render(renderable:IRenderable, stage3DProxy:Stage3DProxy, camera:Camera3D):void
		{
			var context:Context3D = stage3DProxy.context3D;

			//场景变换矩阵（物体坐标-->世界坐标）
			var sceneTransform:Matrix3D = renderable.sourceEntity.sceneTransform;
			//投影矩阵（世界坐标-->投影坐标）
			var projectionmatrix:Matrix3D = camera.viewProjection;

			//物体投影变换矩阵
			modelViewProjection.identity();
			modelViewProjection.append(sceneTransform);
			modelViewProjection.append(projectionmatrix);
		}

		override arcane function activate(stage3DProxy:Stage3DProxy, camera:Camera3D):void
		{
			var context:Context3D = stage3DProxy.context3D;
			super.activate(stage3DProxy, camera);

			context.setProgramConstantsFromVector(Context3DProgramType.FRAGMENT, 0, _data, 2);
		}
	}
}
