package me.feng3d.fagal.fragment.light
{
	import me.feng3d.core.buffer.Context3DBufferTypeID;
	import me.feng3d.core.register.Register;
	import me.feng3d.core.register.RegisterVector;
	import me.feng3d.fagal.base.requestRegister;
	import me.feng3d.fagal.base.requestRegisterVector;
	import me.feng3d.fagal.methods.FagalRE;
	import me.feng3d.fagal.params.ShaderParams;

	/**
	 * 方向光渲染函数
	 * @author warden_feng 2014-11-7
	 */
	public function F_DirectionalLight():void
	{
		var shaderParams:ShaderParams = FagalRE.instance.context3DCache.shaderParams;
		var numDirectionalLights:int = shaderParams.numDirectionalLights;

		//
		var lightDirReg:Register;
		var diffuseColorReg:Register;
		var specularColorReg:Register;

		for (var i:uint = 0; i < numDirectionalLights; ++i)
		{
			//材质镜面反射光数据
			var _specularDataRegister:Register = requestRegister(Context3DBufferTypeID.SPECULARDATA_FC_VECTOR);
			//方向光源场景方向
			var dirLightDirHeadReg:RegisterVector = requestRegisterVector(Context3DBufferTypeID.DIRLIGHTSCENEDIR_FC_VECTOR, numDirectionalLights);
			//公用数据片段常量数据
			var commonsReg:Register = requestRegister(Context3DBufferTypeID.COMMONSDATA_FC_VECTOR);
			//方向光源漫反射光颜色
			var dirLightDiffuseColorHeadReg:RegisterVector = requestRegisterVector(Context3DBufferTypeID.DIRLIGHTDIFFUSE_FC_VECTOR, numDirectionalLights);
			//方向光源镜面反射颜色
			var dirLightSpecularColorHeadReg:RegisterVector = requestRegisterVector(Context3DBufferTypeID.DIRLIGHTSPECULAR_FC_VECTOR, numDirectionalLights);

			lightDirReg = dirLightDirHeadReg.getReg(i);
			diffuseColorReg = dirLightDiffuseColorHeadReg.getReg(i);
			specularColorReg = dirLightSpecularColorHeadReg.getReg(i);

			//法线临时片段寄存器
			var normalFragmentReg:Register = requestRegister(Context3DBufferTypeID.NORMAL_FT_4);
			//光泽纹理数据片段临时寄存器
			var specularTexData:Register = requestRegister("specularTexData_ft_4");
			//视线方向片段临时数据
			var viewDirReg:Register = requestRegister(Context3DBufferTypeID.VIEWDIR_FT_4);
			//总镜面反射颜色寄存器
			var totalSpecularColorReg:Register = requestRegister(Context3DBufferTypeID.TOTALSPECULARLIGHTCOLOR_FT_4);
			//总漫反射颜色寄存器
			var totalLightColorReg:Register = requestRegister(Context3DBufferTypeID.TOTALDIFFUSELIGHTCOLOR_FT_4);

			if (shaderParams.usingDiffuseMethod)
			{

				getDiffCodePerLight(lightDirReg, diffuseColorReg, i == 0, totalLightColorReg, normalFragmentReg, commonsReg);
			}
			if (shaderParams.usingSpecularMethod)
			{
				getSpecCodePerLight(lightDirReg, specularColorReg, i == 0, totalSpecularColorReg, viewDirReg, normalFragmentReg, specularTexData, _specularDataRegister);
			}
		}
	}
}
