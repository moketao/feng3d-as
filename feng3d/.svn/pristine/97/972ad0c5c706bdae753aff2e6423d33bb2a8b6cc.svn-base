package me.feng3d.materials.methods
{
	import me.feng3d.arcane;
	import me.feng3d.core.buffer.context3d.FCVectorBuffer;
	import me.feng3d.core.buffer.context3d.VCVectorBuffer;
	import me.feng3d.fagal.context3dDataIds.Context3DBufferTypeIDShadow;
	import me.feng3d.lights.LightBase;
	import me.feng3d.lights.PointLight;

	use namespace arcane;

	/**
	 *
	 * @author warden_feng 2015-5-28
	 */
	public class SimpleShadowMapMethodBase extends ShadowMapMethodBase
	{
		protected var _usePoint:Boolean;

		/**
		 * 顶点常量数据0
		 */
		protected var shadowCommonsVCData0:Vector.<Number> = new Vector.<Number>(4);

		/**
		 * 通用数据0
		 */
		protected var shadowCommonsData0:Vector.<Number> = new Vector.<Number>(4);

		/**
		 * 通用数据1
		 */
		protected var shadowCommonsData1:Vector.<Number> = new Vector.<Number>(4);

		/**
		 * 通用数据2
		 */
		protected var shadowCommonsData2:Vector.<Number> = new Vector.<Number>(4);

		public function SimpleShadowMapMethodBase(castingLight:LightBase)
		{
			_usePoint = castingLight is PointLight;

			super(castingLight);
		}

		override protected function initBuffers():void
		{
			super.initBuffers();
			mapContext3DBuffer(Context3DBufferTypeIDShadow.SHADOWCOMMONDATA0_VC_VECTOR, VCVectorBuffer, updateShadowCommonVCData0Buffer);
			mapContext3DBuffer(Context3DBufferTypeIDShadow.SHADOWCOMMONDATA0_FC_VECTOR, FCVectorBuffer, updateShadowCommonData0Buffer);
			mapContext3DBuffer(Context3DBufferTypeIDShadow.SHADOWCOMMONDATA1_FC_VECTOR, FCVectorBuffer, updateShadowCommonData1Buffer);
			mapContext3DBuffer(Context3DBufferTypeIDShadow.SHADOWCOMMONDATA2_FC_VECTOR, FCVectorBuffer, updateShadowCommonData2Buffer);
		}

		protected function updateShadowCommonVCData0Buffer(vcVectorBuffer:VCVectorBuffer):void
		{
			vcVectorBuffer.update(shadowCommonsVCData0);
		}

		protected function updateShadowCommonData0Buffer(fcVectorBuffer:FCVectorBuffer):void
		{
			fcVectorBuffer.update(shadowCommonsData0);
		}

		protected function updateShadowCommonData1Buffer(fcVectorBuffer:FCVectorBuffer):void
		{
			fcVectorBuffer.update(shadowCommonsData1);
		}

		protected function updateShadowCommonData2Buffer(fcVectorBuffer:FCVectorBuffer):void
		{
			fcVectorBuffer.update(shadowCommonsData2);
		}

		/**
		 * @inheritDoc
		 */
		override arcane function initConstants():void
		{
			shadowCommonsData0[0] = 1.0;
			shadowCommonsData0[1] = 1 / 255.0;
			shadowCommonsData0[2] = 1 / 65025.0;
			shadowCommonsData0[3] = 1 / 16581375.0;

			shadowCommonsData1[2] = 0;
			shadowCommonsData1[3] = 1;

			if (_usePoint)
			{
				shadowCommonsData2[0] = 0;
				shadowCommonsData2[1] = 0;
				shadowCommonsData2[2] = 0;
				shadowCommonsData2[3] = 1;
			}

			shadowCommonsVCData0[0] = .5;
			shadowCommonsVCData0[1] = -.5;
			shadowCommonsVCData0[2] = 0.0;
			shadowCommonsVCData0[3] = 1.0;
		}
	}
}
