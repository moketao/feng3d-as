package me.feng3d.core.base.subgeometry
{
	import me.feng.component.Component;
	import me.feng.component.event.ComponentEvent;
	import me.feng.component.event.vo.AddedComponentEventVO;
	import me.feng.component.event.vo.RemovedComponentEventVO;
	import me.feng3d.events.GeometryComponentEvent;
	import me.feng3d.fagalRE.FagalIdCenter;

	/**
	 * 自动生成虚拟UV
	 * @author feng 2015-12-8
	 */
	public class AutoGenerateDummyUVs extends Component
	{
		private var _subGeometryBase:SubGeometryBase;
		private var dataTypeId:String;

		public function AutoGenerateDummyUVs()
		{
			super();

			dataTypeId = _.uv_va_2;

			addEventListener(ComponentEvent.BE_ADDED_COMPONET, onBeAddedComponet);
			addEventListener(ComponentEvent.BE_REMOVED_COMPONET, onBeRemovedComponet);
		}

		public function get subGeometryBase():SubGeometryBase
		{
			return _subGeometryBase;
		}

		public function set subGeometryBase(value:SubGeometryBase):void
		{
			if (_subGeometryBase != null)
			{
				subGeometryBase.removeEventListener(GeometryComponentEvent.GET_VA_DATA, onGetVAData);
			}
			_subGeometryBase = value;
			if (_subGeometryBase != null)
			{
				subGeometryBase.addEventListener(GeometryComponentEvent.GET_VA_DATA, onGetVAData);
			}
		}

		/**
		 * 处理被添加事件
		 * @param event
		 */
		protected function onBeAddedComponet(event:ComponentEvent):void
		{
			var addedComponentEventVO:AddedComponentEventVO = event.data;
			subGeometryBase = addedComponentEventVO.container as SubGeometryBase;

			subGeometryBase.invalidVAData(_.uv_va_2);
		}

		/**
		 * 处理被移除事件
		 * @param event
		 */
		protected function onBeRemovedComponet(event:ComponentEvent):void
		{
			var removedComponentEventVO:RemovedComponentEventVO = event.data;
			subGeometryBase = removedComponentEventVO.container as SubGeometryBase;
		}

		protected function onGetVAData(event:GeometryComponentEvent):void
		{
			if (event.data != dataTypeId)
				return;
			var target:Vector.<Number> = subGeometryBase.getVAData(dataTypeId, false);
			target = updateDummyUVs(target);
			subGeometryBase.setVAData(dataTypeId, target);
		}

		/**
		 * 更新虚拟uv
		 * @param target 虚拟uv(输出)
		 * @return 虚拟uv
		 */
		private function updateDummyUVs(target:Vector.<Number>):Vector.<Number>
		{
			var idx:uint, uvIdx:uint;
			var stride:int = 2;
			var len:uint = subGeometryBase.numVertices * stride;

			if (!target)
				target = new Vector.<Number>();
			target.fixed = false;
			target.length = len;
			target.fixed = true;

			idx = 0;
			uvIdx = 0;
			while (idx < len)
			{
				target[idx++] = uvIdx * .5;
				target[idx++] = 1.0 - (uvIdx & 1);

				if (++uvIdx == 3)
					uvIdx = 0;
			}

			return target;
		}

		/**
		 * Fagal编号中心
		 */
		public function get _():FagalIdCenter
		{
			return FagalIdCenter.instance;
		}
	}
}
